package at.jku.bise.ecore.json.grammar.wizard;

import at.jku.bise.ecore.json.grammar.ui.utils.Ecore2XtextJSONExtensions;
import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import jsongrammar.DetailedGrammar;
import jsongrammar.JsonGrammar;
import org.eclipse.core.resources.IFile;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EEnumLiteral;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xtext.wizard.Ecore2XtextConfiguration;
import org.eclipse.xtext.xtext.wizard.WizardConfiguration;
import org.eclipse.xtext.xtext.wizard.ecore2xtext.Ecore2XtextExtensions;
import org.eclipse.xtext.xtext.wizard.ecore2xtext.UniqueNameUtil;

@SuppressWarnings("all")
public class Ecore2XtextJSONGrammarCreatorJava {
  private DetailedGrammar detailedJsonGrammar = null;
  
  public CharSequence grammar(final WizardConfiguration config) {
    CharSequence _xblockexpression = null;
    {
      final Ecore2XtextConfiguration it = config.getEcore2Xtext();
      final XtextJsonGrammarProjectInfo xtextJsonGrammarProject = ((XtextJsonGrammarProjectInfo) config);
      this.detailedJsonGrammar = this.loadJsonGrammar(xtextJsonGrammarProject.getJsonGrammarFile(), 
        config.getEcore2Xtext().getRootElementClass().eResource().getResourceSet()).getDetailedGrammar();
      UniqueNameUtil.clearUniqueNames(it.getDefaultEPackageInfo());
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("// automatically generated by Xtext JSON");
      _builder.newLine();
      _builder.append("grammar ");
      String _name = config.getLanguage().getName();
      _builder.append(_name);
      _builder.append(" with org.eclipse.xtext.common.Terminals");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      {
        Collection<EPackage> _allReferencedEPackages = Ecore2XtextExtensions.allReferencedEPackages(it);
        for(final EPackage it_1 : _allReferencedEPackages) {
          _builder.append("import \"");
          String _nsURI = it_1.getNsURI();
          _builder.append(_nsURI);
          _builder.append("\" ");
          {
            if (((UniqueNameUtil.uniqueName(it_1) != null) && (!Objects.equal(UniqueNameUtil.uniqueName(it_1), "")))) {
              _builder.append("as ");
              String _uniqueName = UniqueNameUtil.uniqueName(it_1);
              _builder.append(_uniqueName);
            }
          }
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.newLine();
      CharSequence _rules = this.rules(it.getRootElementClass());
      _builder.append(_rules);
      _builder.newLineIfNotEmpty();
      {
        List<EClass> _but = this.<EClass>but(Ecore2XtextExtensions.allDispatcherRuleClasses(it), it.getRootElementClass());
        for(final EClass it_2 : _but) {
          _builder.newLine();
          CharSequence _subClassDispatcherRule = this.subClassDispatcherRule(it_2);
          _builder.append(_subClassDispatcherRule);
          _builder.newLineIfNotEmpty();
        }
      }
      {
        List<EClassifier> _but_1 = this.<EClassifier>but(Ecore2XtextExtensions.allConcreteRuleClassifiers(it), it.getRootElementClass());
        for(final EClassifier it_3 : _but_1) {
          _builder.newLine();
          CharSequence _rule = this.rule(it_3);
          _builder.append(_rule);
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public <T extends EClassifier> List<T> but(final Iterable<T> classes, final EClassifier it) {
    final List<T> retVal = IterableExtensions.<T>toList(classes);
    retVal.remove(it);
    return retVal;
  }
  
  public CharSequence subClassDispatcherRule(final EClass it) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _needsDispatcherRule = Ecore2XtextExtensions.needsDispatcherRule(it);
      if (_needsDispatcherRule) {
        String _uniqueName = UniqueNameUtil.uniqueName(it);
        _builder.append(_uniqueName);
        _builder.append(" returns ");
        String _fqn = Ecore2XtextExtensions.fqn(it);
        _builder.append(_fqn);
        _builder.append(":");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        String _subClassAlternatives = this.subClassAlternatives(it);
        _builder.append(_subClassAlternatives, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public String subClassAlternatives(final EClass eClazz) {
    String _xblockexpression = null;
    {
      ArrayList<EClass> _newArrayList = CollectionLiterals.<EClass>newArrayList(eClazz);
      Iterable<EClass> _subClasses = Ecore2XtextExtensions.subClasses(eClazz);
      Iterable<EClass> list = Iterables.<EClass>concat(_newArrayList, _subClasses);
      final Function1<EClass, Boolean> _function = (EClass c) -> {
        return Boolean.valueOf(Ecore2XtextExtensions.needsConcreteRule(c));
      };
      list = IterableExtensions.<EClass>filter(list, _function);
      final Function1<EClass, String> _function_1 = (EClass it) -> {
        return Ecore2XtextExtensions.concreteRuleName(it);
      };
      _xblockexpression = IterableExtensions.join(IterableExtensions.<EClass, String>map(list, _function_1), " | ");
    }
    return _xblockexpression;
  }
  
  public CharSequence assigment(final EStructuralFeature it) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _assignmentKeywordJSON = this.assignmentKeywordJSON(it);
    _builder.append(_assignmentKeywordJSON);
    {
      if ((it instanceof EReference)) {
        CharSequence _openParenthesis = this.openParenthesis(((EReference)it));
        _builder.append(_openParenthesis);
      }
    }
    {
      boolean _isRequired = it.isRequired();
      boolean _not = (!_isRequired);
      if (_not) {
        _builder.append("(");
      }
    }
    {
      boolean _isMany = it.isMany();
      if (_isMany) {
        {
          boolean _isContainment = Ecore2XtextExtensions.isContainment(it);
          if (_isContainment) {
          } else {
            _builder.append("\'(\' ");
          }
        }
      }
    }
    String _quoteIfNeccesary = Ecore2XtextExtensions.quoteIfNeccesary(it.getName());
    _builder.append(_quoteIfNeccesary);
    CharSequence _assignmentOperator = this.assignmentOperator(it);
    _builder.append(_assignmentOperator);
    CharSequence _assignedTerminal = this.assignedTerminal(it);
    _builder.append(_assignedTerminal);
    {
      boolean _isMany_1 = it.isMany();
      if (_isMany_1) {
        _builder.append(" ( \",\" ");
        String _quoteIfNeccesary_1 = Ecore2XtextExtensions.quoteIfNeccesary(it.getName());
        _builder.append(_quoteIfNeccesary_1);
        CharSequence _assignmentOperator_1 = this.assignmentOperator(it);
        _builder.append(_assignmentOperator_1);
        CharSequence _assignedTerminal_1 = this.assignedTerminal(it);
        _builder.append(_assignedTerminal_1);
        _builder.append(")* ");
        {
          boolean _isContainment_1 = Ecore2XtextExtensions.isContainment(it);
          if (_isContainment_1) {
          } else {
            _builder.append("\')\' ");
          }
        }
      }
    }
    {
      boolean _isRequired_1 = it.isRequired();
      boolean _not_1 = (!_isRequired_1);
      if (_not_1) {
        _builder.append(")?");
      }
    }
    {
      if ((it instanceof EReference)) {
        CharSequence _closeParenthesis = this.closeParenthesis(((EReference)it));
        _builder.append(_closeParenthesis);
      }
    }
    _builder.newLineIfNotEmpty();
    {
      if ((it instanceof EAttribute)) {
        {
          boolean _isKeyValue = this.isKeyValue(((EAttribute)it));
          if (_isKeyValue) {
            _builder.append("\'");
            _builder.append(":");
            _builder.append("\'");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence assignedTerminal(final EStructuralFeature it) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (it instanceof EAttribute) {
      _matched=true;
      _switchResult = Ecore2XtextJSONExtensions.assignedJSONRuleCall(((EAttribute)it));
    }
    if (!_matched) {
      if (it instanceof EReference) {
        _matched=true;
        CharSequence _xifexpression = null;
        boolean _isContainment = ((EReference)it).isContainment();
        if (_isContainment) {
          _xifexpression = UniqueNameUtil.uniqueName(((EReference)it).getEReferenceType());
        } else {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("[");
          String _fqn = Ecore2XtextExtensions.fqn(((EReference)it).getEReferenceType());
          _builder.append(_fqn);
          _builder.append("|EString]");
          _xifexpression = _builder;
        }
        _switchResult = _xifexpression;
      }
    }
    if (!_matched) {
      StringConcatenation _builder = new StringConcatenation();
      _switchResult = _builder;
    }
    return _switchResult;
  }
  
  public CharSequence assignmentOperator(final EStructuralFeature it) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _isMany = it.isMany();
      if (_isMany) {
        _builder.append("+=");
      } else {
        _builder.append("=");
      }
    }
    return _builder;
  }
  
  public CharSequence rules(final EClassifier it) {
    CharSequence _xifexpression = null;
    if (((it != null) && Ecore2XtextExtensions.needsConcreteRule(it))) {
      _xifexpression = this.rule(it);
    }
    return _xifexpression;
  }
  
  public CharSequence rule(final EClassifier it) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (it instanceof EClass) {
      _matched=true;
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("//EClass ");
      String _name = ((EClass)it).getName();
      _builder.append(_name);
      _builder.newLineIfNotEmpty();
      String _concreteRuleName = Ecore2XtextExtensions.concreteRuleName(((EClass)it));
      _builder.append(_concreteRuleName);
      _builder.append(" returns ");
      String _fqn = Ecore2XtextExtensions.fqn(it);
      _builder.append(_fqn);
      _builder.append(":");
      _builder.newLineIfNotEmpty();
      {
        boolean _onlyOptionalFeatures = Ecore2XtextExtensions.onlyOptionalFeatures(((EClass)it));
        if (_onlyOptionalFeatures) {
          _builder.append("\t");
          _builder.append("{");
          String _fqn_1 = Ecore2XtextExtensions.fqn(it);
          _builder.append(_fqn_1, "\t");
          _builder.append("}");
          _builder.newLineIfNotEmpty();
        }
      }
      {
        Iterable<EStructuralFeature> _prefixFeatures = Ecore2XtextExtensions.prefixFeatures(((EClass)it));
        for(final EStructuralFeature strF : _prefixFeatures) {
          _builder.append("\t");
          CharSequence _assigment = this.assigment(strF);
          _builder.append(_assigment, "\t");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("\t");
      CharSequence _openParenthesis = this.openParenthesis(((EClass)it));
      _builder.append(_openParenthesis, "\t");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      CharSequence _idAssignmentJSON = this.idAssignmentJSON(((EClass)it));
      _builder.append(_idAssignmentJSON, "\t");
      {
        boolean _isEmpty = IterableExtensions.isEmpty(Ecore2XtextExtensions.inlinedFeatures(((EClass)it)));
        boolean _not = (!_isEmpty);
        if (_not) {
          _builder.newLineIfNotEmpty();
          {
            Iterable<EAttribute> _allAttributes = Ecore2XtextExtensions.allAttributes(((EClass)it));
            for(final EAttribute attr : _allAttributes) {
              _builder.append("\t");
              _builder.append("\t");
              CharSequence _assigment_1 = this.assigment(attr);
              _builder.append(_assigment_1, "\t\t");
              _builder.newLineIfNotEmpty();
            }
          }
          {
            Iterable<EReference> _allCrossReferences = Ecore2XtextExtensions.allCrossReferences(((EClass)it));
            for(final EReference ref : _allCrossReferences) {
              _builder.append("\t");
              _builder.append("\t\t");
              CharSequence _assigment_2 = this.assigment(ref);
              _builder.append(_assigment_2, "\t\t\t");
              _builder.newLineIfNotEmpty();
            }
          }
          {
            Iterable<EReference> _allContainmentReferences = Ecore2XtextExtensions.allContainmentReferences(((EClass)it));
            for(final EReference conti : _allContainmentReferences) {
              _builder.append("\t");
              _builder.append("\t\t");
              CharSequence _assigment_3 = this.assigment(conti);
              _builder.append(_assigment_3, "\t\t\t");
              _builder.newLineIfNotEmpty();
            }
          }
          _builder.append("\t");
          CharSequence _closeParenthesis = this.closeParenthesis(((EClass)it));
          _builder.append(_closeParenthesis, "\t");
        }
      }
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _switchResult = _builder;
    }
    if (!_matched) {
      if (it instanceof EEnum) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("enum ");
        String _quoteIfNeccesary = Ecore2XtextExtensions.quoteIfNeccesary(((EEnum)it).getName());
        _builder.append(_quoteIfNeccesary);
        _builder.append(" returns ");
        String _fqn = Ecore2XtextExtensions.fqn(it);
        _builder.append(_fqn);
        _builder.append(":");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t");
        final Function1<EEnumLiteral, String> _function = (EEnumLiteral it_1) -> {
          String _name = it_1.getName();
          String _plus = (_name + " = \'");
          String _name_1 = it_1.getName();
          String _plus_1 = (_plus + _name_1);
          return (_plus_1 + "\'");
        };
        String _join = IterableExtensions.join(ListExtensions.<EEnumLiteral, String>map(((EEnum)it).getELiterals(), _function), " | ");
        _builder.append(_join, "\t\t\t\t");
        _builder.append(";");
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (it instanceof EDataType) {
        _matched=true;
        CharSequence _xifexpression = null;
        boolean _isSerializable = ((EDataType)it).isSerializable();
        if (_isSerializable) {
          StringConcatenation _builder = new StringConcatenation();
          String _uniqueName = UniqueNameUtil.uniqueName(it);
          _builder.append(_uniqueName);
          _builder.append(" returns ");
          String _fqn = Ecore2XtextExtensions.fqn(it);
          _builder.append(_fqn);
          _builder.append(":");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          String _dataTypeRuleBody = Ecore2XtextExtensions.dataTypeRuleBody(((EDataType)it));
          _builder.append(_dataTypeRuleBody, "\t");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
          _xifexpression = _builder;
        }
        _switchResult = _xifexpression;
      }
    }
    if (!_matched) {
      throw new IllegalStateException(("No rule template for " + it));
    }
    return _switchResult;
  }
  
  public CharSequence jsonSeparator(final EStructuralFeature it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'");
    _builder.append(":");
    _builder.append("\'");
    return _builder;
  }
  
  public boolean isKeyword(final EStructuralFeature it) {
    boolean _contains = this.detailedJsonGrammar.getKeywords().contains(it);
    return (Boolean.valueOf(_contains) == Boolean.valueOf(true));
  }
  
  public boolean isKeyValue(final EAttribute it) {
    boolean _contains = this.detailedJsonGrammar.getKeyValue().contains(it);
    return (Boolean.valueOf(_contains) == Boolean.valueOf(true));
  }
  
  public CharSequence assignmentKeywordJSON(final EStructuralFeature it) {
    CharSequence _xifexpression = null;
    boolean _isKeyword = this.isKeyword(it);
    if (_isKeyword) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("//Keywords");
      _builder.newLine();
      _builder.append("\'\"");
      String _name = it.getName();
      _builder.append(_name);
      _builder.append("\"\' ");
      CharSequence _jsonSeparator = this.jsonSeparator(it);
      _builder.append(_jsonSeparator);
      _builder.newLineIfNotEmpty();
      _xifexpression = _builder;
    } else {
      CharSequence _xifexpression_1 = null;
      if ((it instanceof EReference)) {
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("//EReference is not a keyword");
        _builder_1.newLine();
        _xifexpression_1 = _builder_1;
      } else {
        CharSequence _xifexpression_2 = null;
        if ((it instanceof EAttribute)) {
          CharSequence _xifexpression_3 = null;
          boolean _isKeyValue = this.isKeyValue(((EAttribute)it));
          if (_isKeyValue) {
            StringConcatenation _builder_2 = new StringConcatenation();
            _builder_2.append("//KeyValue");
            _builder_2.newLine();
            _xifexpression_3 = _builder_2;
          }
          _xifexpression_2 = _xifexpression_3;
        } else {
          String _name_1 = it.getName();
          String _plus = ("\'" + _name_1);
          _xifexpression_2 = (_plus + "\' ");
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public CharSequence idAssignmentJSON(final EClass it) {
    CharSequence _xblockexpression = null;
    {
      InputOutput.<String>println(it.toString());
      final EAttribute idAttr = Ecore2XtextExtensions.idAttribute(it);
      CharSequence _xifexpression = null;
      if ((idAttr != null)) {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("//Keyword´s Name");
        _builder.newLine();
        CharSequence _assigment = this.assigment(idAttr);
        _builder.append(_assigment);
        _builder.newLineIfNotEmpty();
        _xifexpression = _builder;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  public CharSequence closeParenthesis(final EClass it) {
    CharSequence _xifexpression = null;
    boolean _needBraces = this.needBraces(it);
    if (_needBraces) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("\'");
      _builder.append("}");
      _builder.append("\'");
      _xifexpression = _builder;
    } else {
      CharSequence _xifexpression_1 = null;
      boolean _needBrackets = this.needBrackets(it);
      if (_needBrackets) {
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("\'");
        _builder_1.append("]");
        _builder_1.append("\'");
        _xifexpression_1 = _builder_1;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public CharSequence openParenthesis(final EClass it) {
    CharSequence _xifexpression = null;
    boolean _needBraces = this.needBraces(it);
    if (_needBraces) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("\'");
      _builder.append("{");
      _builder.append("\'");
      _xifexpression = _builder;
    } else {
      CharSequence _xifexpression_1 = null;
      boolean _needBrackets = this.needBrackets(it);
      if (_needBrackets) {
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("\'");
        _builder_1.append("[");
        _builder_1.append("\'");
        _xifexpression_1 = _builder_1;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public boolean needBrackets(final EClass it) {
    boolean _contains = this.detailedJsonGrammar.getBracketsEClass().contains(it);
    return (Boolean.valueOf(_contains) == Boolean.valueOf(true));
  }
  
  public boolean needBraces(final EClass it) {
    boolean _contains = this.detailedJsonGrammar.getCurlyBracesEClass().contains(it);
    return (Boolean.valueOf(_contains) == Boolean.valueOf(true));
  }
  
  public CharSequence openParenthesis(final EReference it) {
    CharSequence _xifexpression = null;
    boolean _needBrackets = this.needBrackets(it);
    if (_needBrackets) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("\'");
      _builder.append("[");
      _builder.append("\'");
      _xifexpression = _builder;
    } else {
      CharSequence _xifexpression_1 = null;
      boolean _needCurlyBraces = this.needCurlyBraces(it);
      if (_needCurlyBraces) {
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("\'");
        _builder_1.append("{");
        _builder_1.append("\'");
        _xifexpression_1 = _builder_1;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public CharSequence closeParenthesis(final EReference it) {
    CharSequence _xifexpression = null;
    boolean _needBrackets = this.needBrackets(it);
    if (_needBrackets) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("\'");
      _builder.append("]");
      _builder.append("\'");
      _xifexpression = _builder;
    } else {
      CharSequence _xifexpression_1 = null;
      boolean _needCurlyBraces = this.needCurlyBraces(it);
      if (_needCurlyBraces) {
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("\'");
        _builder_1.append("}");
        _builder_1.append("\'");
        _xifexpression_1 = _builder_1;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public boolean needBrackets(final EReference it) {
    boolean _contains = this.detailedJsonGrammar.getBracketsReferences().contains(it);
    return (Boolean.valueOf(_contains) == Boolean.valueOf(true));
  }
  
  public boolean needCurlyBraces(final EReference it) {
    boolean _contains = this.detailedJsonGrammar.getCurlyBracesReferences().contains(it);
    return (Boolean.valueOf(_contains) == Boolean.valueOf(true));
  }
  
  public JsonGrammar loadJsonGrammar(final IFile jsonGrammarFile, final ResourceSet reset) {
    final Resource resource = reset.getResource(URI.createPlatformResourceURI(jsonGrammarFile.getFullPath().toString(), true), true);
    EObject _get = resource.getContents().get(0);
    if ((_get instanceof JsonGrammar)) {
      EObject _get_1 = resource.getContents().get(0);
      return ((JsonGrammar) _get_1);
    } else {
      throw new IllegalArgumentException("Expecting JsonGrammar type of object");
    }
  }
}
